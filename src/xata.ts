// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "tracks",
    columns: [
      { name: "country_code", type: "string" },
      { name: "track_id", type: "string" },
      { name: "track_description", type: "string" },
      { name: "state_providence", type: "string" },
    ],
  },
  {
    name: "training_centers",
    columns: [
      { name: "country_code", type: "string" },
      { name: "training_center_id", type: "string" },
      { name: "training_center_name", type: "string" },
      { name: "state_providence", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Tracks = InferredTypes["tracks"];
export type TracksRecord = Tracks & XataRecord;

export type TrainingCenters = InferredTypes["training_centers"];
export type TrainingCentersRecord = TrainingCenters & XataRecord;

export type DatabaseSchema = {
  tracks: TracksRecord;
  training_centers: TrainingCentersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Dan-Reale-s-workspace-3m1pjh.us-east-1.xata.sh/db/equibase",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
